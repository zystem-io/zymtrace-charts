{{- include "zymtrace.validateMode" (list "clickhouse" .Values.clickhouse.mode) }}
{{- include "zymtrace.validateMode" (list "postgres" .Values.postgres.mode) }}
{{- include "zymtrace.validateMode" (list "storage" .Values.storage.mode) }}
{{- if eq .Values.clickhouse.mode "use_existing" }}
{{- if .Values.clickhouse.use_existing.host }}
{{- include "zymtrace.validateEndpoint" (list .Values.clickhouse.use_existing.host) }}
{{- end }}
{{- end }}
{{- if eq .Values.storage.mode "use_existing" }}
{{- if not (or (eq .Values.storage.use_existing.type "minio") (eq .Values.storage.use_existing.type "s3") (eq .Values.storage.use_existing.type "gcs")) }}
{{- fail "Storage type must be either 'minio', 's3', or 'gcs'" }}
{{- end }}
{{- end }}
{{- if and .Values.globalSymbolization.enabled (not .Values.globalSymbolization.config.bucketName) }}
{{- fail "When globalSymbolization is enabled, bucketName must be provided" }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "zymtrace.resourceName" (list $ "config") }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "zymtrace.labels" . | nindent 4 }}
data:
  # Database configurations
  {{- if eq .Values.clickhouse.mode "create" }}
  CLICKHOUSE_USER: "{{ .Values.clickhouse.create.config.user }}"
  CLICKHOUSE_DB: "{{ .Values.clickhouse.create.config.database }}_profiling"
  CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"
  {{- else }}
  CLICKHOUSE_USER: "{{ .Values.clickhouse.use_existing.user }}"
  CLICKHOUSE_DB: "{{ .Values.clickhouse.use_existing.database }}_profiling"
  CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"
  {{- end }}

  {{- if eq .Values.postgres.mode "create" }}
  POSTGRES_USER: {{ .Values.postgres.create.config.user | quote }}
  {{- else }}
  POSTGRES_USER: {{ .Values.postgres.use_existing.user | quote }}
  {{- end }}

  # Service configurations - ClickHouse
  {{- if eq .Values.clickhouse.mode "create" }}
  INGEST__CLICKHOUSE__USERNAME: "{{ .Values.clickhouse.create.config.user }}"
  INGEST__CLICKHOUSE__ADDR: "http://{{ include "zymtrace.resourceName" (list $ "clickhouse") }}:{{ .Values.clickhouse.create.service.http.port }}"
  INGEST__CLICKHOUSE__DATABASE: "{{ .Values.clickhouse.create.config.database }}_profiling"
  #metrics
  INGEST__METRICS__CLICKHOUSE__USERNAME: "{{ .Values.clickhouse.create.config.user }}"
  INGEST__METRICS__CLICKHOUSE__ADDR: "http://{{ include "zymtrace.resourceName" (list $ "clickhouse") }}:{{ .Values.clickhouse.create.service.http.port }}"
  INGEST__METRICS__CLICKHOUSE__DATABASE: "{{ .Values.clickhouse.create.config.database }}_metrics"

  WEB__CLICKHOUSE__USERNAME: "{{ .Values.clickhouse.create.config.user }}"
  WEB__CLICKHOUSE__ADDR: "http://{{ include "zymtrace.resourceName" (list $ "clickhouse") }}:{{ .Values.clickhouse.create.service.http.port }}"
  WEB__CLICKHOUSE__DATABASE: "{{ .Values.clickhouse.create.config.database }}_profiling"

  WEB__METRICS__CLICKHOUSE__USERNAME: "{{ .Values.clickhouse.create.config.user }}"
  WEB__METRICS__CLICKHOUSE__ADDR: "http://{{ include "zymtrace.resourceName" (list $ "clickhouse") }}:{{ .Values.clickhouse.create.service.http.port }}"
  WEB__METRICS__CLICKHOUSE__DATABASE: "{{ .Values.clickhouse.create.config.database }}_metrics"
  {{- else }}
  INGEST__CLICKHOUSE__USERNAME: "{{ .Values.clickhouse.use_existing.user }}"
  INGEST__CLICKHOUSE__ADDR: "{{ .Values.clickhouse.use_existing.host }}"
  INGEST__CLICKHOUSE__DATABASE: "{{ .Values.clickhouse.use_existing.database }}_profiling"
  INGEST__CLICKHOUSE__AUTO_CREATE_DBS: {{ .Values.clickhouse.use_existing.autoCreateDBs | default false | quote }}
  #metrics
  INGEST__METRICS__CLICKHOUSE__USERNAME: "{{ .Values.clickhouse.use_existing.user }}"
  INGEST__METRICS__CLICKHOUSE__ADDR: "{{ .Values.clickhouse.use_existing.host }}"
  INGEST__METRICS__CLICKHOUSE__DATABASE: "{{ .Values.clickhouse.use_existing.database }}_metrics"
  INGEST__METRICS__CLICKHOUSE__AUTO_CREATE_DBS: {{ .Values.clickhouse.use_existing.autoCreateDBs | default false | quote }}

  WEB__CLICKHOUSE__USERNAME: "{{ .Values.clickhouse.use_existing.user }}"
  WEB__CLICKHOUSE__ADDR: "{{ .Values.clickhouse.use_existing.host }}"
  WEB__CLICKHOUSE__DATABASE: "{{ .Values.clickhouse.use_existing.database }}_profiling"

  WEB__METRICS__CLICKHOUSE__USERNAME: "{{ .Values.clickhouse.use_existing.user }}"
  WEB__METRICS__CLICKHOUSE__ADDR: "{{ .Values.clickhouse.use_existing.host }}"
  WEB__METRICS__CLICKHOUSE__DATABASE: "{{ .Values.clickhouse.use_existing.database }}_metrics"
  {{- end }}

  # Service configurations - Postgres
  {{- if eq .Values.postgres.mode "create" }}
  IDENTITY__POSTGRES__USERNAME: {{ .Values.postgres.create.config.user | quote }}
  SYMDB__POSTGRES__USERNAME: {{ .Values.postgres.create.config.user | quote }}
  SYMDB__POSTGRES__ADDR: "{{ include "zymtrace.resourceName" (list $ "postgres") }}:{{ .Values.postgres.create.service.port }}"
  IDENTITY__POSTGRES__ADDR: "{{ include "zymtrace.resourceName" (list $ "postgres") }}:{{ .Values.postgres.create.service.port }}"
  {{- else if eq .Values.postgres.mode "gcp_cloudsql" }}
  IDENTITY__POSTGRES__USERNAME: {{ .Values.postgres.gcp_cloudsql.user | quote }}
  SYMDB__POSTGRES__USERNAME: {{ .Values.postgres.gcp_cloudsql.user | quote }}
  SYMDB__POSTGRES__ADDR: "{{ include "zymtrace.resourceName" (list $ "postgres") }}:{{ .Values.postgres.gcp_cloudsql.proxy.port }}"
  IDENTITY__POSTGRES__ADDR: "{{ include "zymtrace.resourceName" (list $ "postgres") }}:{{ .Values.postgres.gcp_cloudsql.proxy.port }}"
  IDENTITY__POSTGRES__DATABASE: {{ .Values.postgres.gcp_cloudsql.database }}_identity
  SYMDB__POSTGRES__DATABASE: {{ .Values.postgres.gcp_cloudsql.database }}_symdb
  IDENTITY__POSTGRES__AUTO_CREATE_DBS: {{ .Values.postgres.gcp_cloudsql.autoCreateDBs | default false | quote }}
  SYMDB__POSTGRES__AUTO_CREATE_DBS: {{ .Values.postgres.gcp_cloudsql.autoCreateDBs | default false | quote }}
  {{- else if eq .Values.postgres.mode "use_existing" }}
  IDENTITY__POSTGRES__USERNAME: {{ .Values.postgres.use_existing.user | quote }}
  IDENTITY__POSTGRES__ADDR: {{ .Values.postgres.use_existing.host | quote }}
  IDENTITY__POSTGRES__SECURE: {{ .Values.postgres.use_existing.secure | quote }}
  IDENTITY__POSTGRES__DATABASE: {{ .Values.postgres.use_existing.database }}_identity
  SYMDB__POSTGRES__USERNAME: {{ .Values.postgres.use_existing.user | quote }}
  SYMDB__POSTGRES__ADDR: {{ .Values.postgres.use_existing.host | quote }}
  SYMDB__POSTGRES__SECURE: {{ .Values.postgres.use_existing.secure | quote }}
  SYMDB__POSTGRES__DATABASE: {{ .Values.postgres.use_existing.database }}_symdb
  IDENTITY__POSTGRES__AUTO_CREATE_DBS: {{ .Values.postgres.use_existing.autoCreateDBs | default false | quote }}
  SYMDB__POSTGRES__AUTO_CREATE_DBS: {{ .Values.postgres.use_existing.autoCreateDBs | default false | quote }}
  {{- end }}

  # Service endpoints
  INGEST__IDENTITY_SERVICE__ENDPOINT: "http://{{ include "zymtrace.resourceName" (list $ "identity") }}:{{ .Values.services.identity.port }}"
  INGEST__SYMDB__ENDPOINT: "http://{{ include "zymtrace.resourceName" (list $ "gateway") }}:{{ .Values.services.gateway.port }}"
  SYMDB__IDENTITY_SERVICE__ENDPOINT: "http://{{ include "zymtrace.resourceName" (list $ "identity") }}:{{ .Values.services.identity.port }}"
  WEB__SYMDB__ENDPOINT: "http://{{ include "zymtrace.resourceName" (list $ "gateway") }}:{{ .Values.services.gateway.port }}"
  WEB__IDENTITY_SERVICE__ENDPOINT: "http://{{ include "zymtrace.resourceName" (list $ "identity") }}:{{ .Values.services.identity.port }}"
  
  # Event TTL.
  INGEST__EVENT_TTL_HOURS: {{ (mul .Values.global.dataRetentionDays 24) | quote }}

  # Storage configuration
  SYMDB__SYMBOL_BUCKET__BUCKET_NAME: {{ .Values.storage.buckets.symbols | quote }}
  {{- if eq .Values.storage.mode "create" }}
  SYMDB__SYMBOL_BUCKET__AWS_ENDPOINT: "http://{{ include "zymtrace.resourceName" (list $ "minio") }}:{{ .Values.storage.create.service.api.port }}"
  {{- else if eq .Values.storage.use_existing.type "minio" }}
  SYMDB__SYMBOL_BUCKET__AWS_ENDPOINT: {{ .Values.storage.use_existing.minio.endpoint | quote }}
  {{- else if eq .Values.storage.use_existing.type "s3" }}
  SYMDB__SYMBOL_BUCKET__AWS_REGION: {{ .Values.storage.use_existing.s3.region | quote }}
  {{- else if eq .Values.storage.use_existing.type "gcs" }}
  SYMDB__SYMBOL_BUCKET__AWS_ENDPOINT: {{ .Values.storage.use_existing.gcs.endpoint | default "https://storage.googleapis.com" | quote }}
  {{- end }}

  # Global symbolization configuration
  {{- if .Values.globalSymbolization.enabled }}
  SYMDB__GLOBAL_SYM_ENDPOINT__BUCKET_NAME: {{ .Values.globalSymbolization.config.bucketName | quote }}
  {{- if .Values.globalSymbolization.config.endpoint }}
  SYMDB__GLOBAL_SYM_ENDPOINT__AWS_ENDPOINT: {{ .Values.globalSymbolization.config.endpoint | quote }}
  {{- end }}
  {{- if .Values.globalSymbolization.config.region }}
  SYMDB__GLOBAL_SYM_ENDPOINT__AWS_REGION: {{ .Values.globalSymbolization.config.region | quote }}
  {{- end }}
  {{- end }}

  # UI configuration
  WEB_SERVICE: "http://{{ include "zymtrace.resourceName" (list $ "web") }}:{{ .Values.services.web.port }}"
  INGEST_SERVICE: "grpc://{{ include "zymtrace.resourceName" (list $ "ingest") }}:{{ .Values.services.ingest.port }}"
  SYMDB_SERVICE: "grpc://{{ include "zymtrace.resourceName" (list $ "symdb") }}:{{ .Values.services.symdb.port }}"

  # License key configuration
  {{- if .Values.global.licenseKey }}
  WEB__LICENSE__KEY: {{ .Values.global.licenseKey | quote }}
  INGEST__LICENSE__KEY: {{ .Values.global.licenseKey | quote }}
  {{- end }}

  # Common environment variables
  {{- if hasKey .Values.services "common" }}
  {{- if hasKey .Values.services.common "env" }}
  {{- include "zymtrace.commonEnvVars" . | nindent 2 }}
  {{- end }}
  {{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "zymtrace.resourceName" (list $ "secrets") }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "zymtrace.labels" . | nindent 4 }}
type: Opaque
stringData:
  {{- if eq .Values.clickhouse.mode "create" }}
  CLICKHOUSE_PASSWORD: {{ .Values.clickhouse.create.config.password | quote }}
  INGEST__CLICKHOUSE__PASSWORD: {{ .Values.clickhouse.create.config.password | quote }}
  #metrics
  INGEST__METRICS__CLICKHOUSE__PASSWORD: {{ .Values.clickhouse.create.config.password | quote }}

  WEB__CLICKHOUSE__PASSWORD: {{ .Values.clickhouse.create.config.password | quote }}
  WEB__METRICS__CLICKHOUSE__PASSWORD: {{ .Values.clickhouse.create.config.password | quote }}
  {{- else }}
  CLICKHOUSE_PASSWORD: {{ .Values.clickhouse.use_existing.password | quote }}
  INGEST__CLICKHOUSE__PASSWORD: {{ .Values.clickhouse.use_existing.password | quote }}

  #metrics
  INGEST__METRICS__CLICKHOUSE__PASSWORD: {{ .Values.clickhouse.use_existing.password | quote }}

  WEB__CLICKHOUSE__PASSWORD: {{ .Values.clickhouse.use_existing.password | quote }}
  WEB__METRICS__CLICKHOUSE__PASSWORD: {{ .Values.clickhouse.use_existing.password | quote }}
  {{- end }}

  {{- if eq .Values.postgres.mode "create" }}
  # Postgres doesn't like using `data` directly on GKE due to presence of `lost+found` directory.
  PGDATA: "/var/lib/postgresql/data/pgdata"
  POSTGRES_PASSWORD: {{ .Values.postgres.create.config.password | quote }}
  IDENTITY__POSTGRES__PASSWORD: {{ .Values.postgres.create.config.password | quote }}
  SYMDB__POSTGRES__PASSWORD: {{ .Values.postgres.create.config.password | quote }}
  {{- else if eq .Values.postgres.mode "gcp_cloudsql" }}
  # For Cloud SQL with IAM authentication, no password is needed as we use the IAM proxy
  IDENTITY__POSTGRES__PASSWORD: ""
  SYMDB__POSTGRES__PASSWORD: ""
  {{- else }}
  POSTGRES_PASSWORD: {{ .Values.postgres.use_existing.password | quote }}
  IDENTITY__POSTGRES__PASSWORD: {{ .Values.postgres.use_existing.password | quote }}
  SYMDB__POSTGRES__PASSWORD: {{ .Values.postgres.use_existing.password | quote }}
  {{- end }}

  {{- if eq .Values.storage.mode "create" }}
  MINIO_ROOT_USER: {{ .Values.storage.create.config.user | quote }}
  MINIO_ROOT_PASSWORD: {{ .Values.storage.create.config.password | quote }}
  SYMDB__SYMBOL_BUCKET__AWS_ACCESS_KEY_ID: {{ .Values.storage.create.config.user | quote }}
  SYMDB__SYMBOL_BUCKET__AWS_SECRET_ACCESS_KEY: {{ .Values.storage.create.config.password | quote }}
  {{- else if eq .Values.storage.use_existing.type "minio" }}
  SYMDB__SYMBOL_BUCKET__AWS_ACCESS_KEY_ID: {{ .Values.storage.use_existing.minio.user | quote }}
  SYMDB__SYMBOL_BUCKET__AWS_SECRET_ACCESS_KEY: {{ .Values.storage.use_existing.minio.password | quote }}
  {{- else if eq .Values.storage.use_existing.type "s3" }}
  SYMDB__SYMBOL_BUCKET__AWS_ACCESS_KEY_ID: {{ .Values.storage.use_existing.s3.accessKey | quote }}
  SYMDB__SYMBOL_BUCKET__AWS_SECRET_ACCESS_KEY: {{ .Values.storage.use_existing.s3.secretKey | quote }}
  {{- if .Values.storage.use_existing.s3.sessionToken }}
  SYMDB__SYMBOL_BUCKET__AWS_SESSION_TOKEN: {{ .Values.storage.use_existing.s3.sessionToken | quote }}
  {{- end }}
  {{- else if eq .Values.storage.use_existing.type "gcs" }}
  SYMDB__SYMBOL_BUCKET__AWS_ACCESS_KEY_ID: {{ .Values.storage.use_existing.gcs.accessKey | quote }}
  SYMDB__SYMBOL_BUCKET__AWS_SECRET_ACCESS_KEY: {{ .Values.storage.use_existing.gcs.secretKey | quote }}
  {{- end }}

  # Global symbolization credentials
  {{- if .Values.globalSymbolization.enabled }}
  {{- if .Values.globalSymbolization.config.accessKey }}
  SYMDB__GLOBAL_SYM_ENDPOINT__AWS_ACCESS_KEY_ID: {{ .Values.globalSymbolization.config.accessKey | quote }}
  {{- end }}
  {{- if .Values.globalSymbolization.config.secretKey }}
  SYMDB__GLOBAL_SYM_ENDPOINT__AWS_SECRET_ACCESS_KEY: {{ .Values.globalSymbolization.config.secretKey | quote }}
  {{- end }}
  {{- end }}
