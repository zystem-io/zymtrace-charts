{{- if eq .Values.storage.mode "use_existing" }}
{{- if not (or (eq .Values.storage.use_existing.type "minio") (eq .Values.storage.use_existing.type "s3") (eq .Values.storage.use_existing.type "gcs")) }}
{{- fail "Storage type must be either 'minio', 's3', or 'gcs'" }}
{{- end }}
{{- if eq .Values.storage.use_existing.type "minio" }}
{{- include "zymtrace.validateEndpoint" (list .Values.storage.use_existing.minio.endpoint) }}
{{- else if and (eq .Values.storage.use_existing.type "s3") .Values.storage.use_existing.s3.endpoint }}
{{- include "zymtrace.validateEndpoint" (list .Values.storage.use_existing.s3.endpoint) }}
{{- else if eq .Values.storage.use_existing.type "gcs" }}
{{- include "zymtrace.validateEndpoint" (list (.Values.storage.use_existing.gcs.endpoint | default "https://storage.googleapis.com")) }}
{{- end }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "zymtrace.resourceName" (list $ "bucket-check") }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "zymtrace.labels" . | nindent 4 }}
    app: {{ include "zymtrace.resourceName" (list $ "bucket-check") }}
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "0" 
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
spec:
  ttlSecondsAfterFinished: 180
  activeDeadlineSeconds: 180  # 3 minutes timeout
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: {{ include "zymtrace.resourceName" (list $ "bucket-check") }}
    spec:
      {{- include "zymtrace.nodeSelector" (list $ "bucket-check") | nindent 6 }}
      {{- include "zymtrace.tolerations" (list $ "bucket-check") | nindent 6 }}
      {{- include "zymtrace.affinity" (list $ "bucket-check") | nindent 6 }}
      {{- include "zymtrace.imagePullSecrets" . | nindent 6 }}
      containers:
        - name: bucket-check
          image: "{{ include "zymtrace.imageRegistry" . }}{{ include "zymtrace.repositoryName" (list $ "migrate") }}:{{ include "zymtrace.serviceTag" (list . "migrate") }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              echo "Starting bucket check"
              
              {{- if eq .Values.storage.use_existing.type "minio" }}
              echo "Storage Type: MinIO"
              echo "Bucket Name: {{ .Values.storage.buckets.symbols }}"
              echo "Endpoint: ${SYMDB__SYMBOL_BUCKET__AWS_ENDPOINT}"
              zymtrace-cli check-bucket \
                --bucket-name {{ .Values.storage.buckets.symbols | quote }} \
                --aws-access-key-id "${SYMDB__SYMBOL_BUCKET__AWS_ACCESS_KEY_ID}" \
                --aws-secret-access-key "${SYMDB__SYMBOL_BUCKET__AWS_SECRET_ACCESS_KEY}" \
                --aws-endpoint "${SYMDB__SYMBOL_BUCKET__AWS_ENDPOINT}"
              {{- else if eq .Values.storage.use_existing.type "gcs" }}
              echo "Storage Type: GCS"
              echo "Bucket Name: {{ .Values.storage.buckets.symbols }}"
              echo "Endpoint: ${SYMDB__SYMBOL_BUCKET__AWS_ENDPOINT}"
              zymtrace-cli check-bucket \
                --bucket-name {{ .Values.storage.buckets.symbols | quote }} \
                --aws-access-key-id "${SYMDB__SYMBOL_BUCKET__AWS_ACCESS_KEY_ID}" \
                --aws-secret-access-key "${SYMDB__SYMBOL_BUCKET__AWS_SECRET_ACCESS_KEY}" \
                --aws-endpoint "${SYMDB__SYMBOL_BUCKET__AWS_ENDPOINT}"
              {{- else }}
              echo "Storage Type: S3"
              echo "Bucket Name: {{ .Values.storage.buckets.symbols | quote }}"
              echo "Region: ${SYMDB__SYMBOL_BUCKET__AWS_REGION}"
              zymtrace-cli check-bucket \
                --bucket-name {{ .Values.storage.buckets.symbols | quote }} \
                --aws-access-key-id "${SYMDB__SYMBOL_BUCKET__AWS_ACCESS_KEY_ID}" \
                --aws-secret-access-key "${SYMDB__SYMBOL_BUCKET__AWS_SECRET_ACCESS_KEY}" \
                {{- if .Values.storage.use_existing.s3.useIAM }}
                --use-iam "${SYMDB__SYMBOL_BUCKET__USE_IAM}" \
                {{- end }}
                --aws-region "${SYMDB__SYMBOL_BUCKET__AWS_REGION}"
              {{- end }}
              
              CHECK_STATUS=$?
              
              if [ $CHECK_STATUS -eq 0 ]; then
                echo "Bucket check completed successfully"
                exit 0
              else
                echo "Bucket check failed with status $CHECK_STATUS"
                exit 1
              fi
          {{- include "zymtrace.serviceEnvConfig" (list $ "migrate") | nindent 10 }}
      restartPolicy: OnFailure
{{- end }}
